// Copyright 2021 the V8 project authors; 2022 Igalia S.L. All rights reserved.
// This code is governed by the BSD license found in the LICENSE file.

/*---
path: language/expressions/logical-assignment/left-hand-side-private-reference-accessor-property-
esid: sec-assignment-operators-runtime-semantics-evaluation
info: |
  sec-property-accessors-runtime-semantics-evaluation
  MemberExpression : MemberExpression `.` PrivateIdentifier

    1. Let _baseReference_ be the result of evaluating |MemberExpression|.
    2. Let _baseValue_ be ? GetValue(_baseReference_).
    3. Let _fieldNameString_ be the StringValue of |PrivateIdentifier|.
    4. Return ! MakePrivateReference(_baseValue_, _fieldNameString_).

  PutValue (V, W)
    ...
    5.b. If IsPrivateReference(_V_) is *true*, then
      i. Return ? PrivateSet(_baseObj_, _V_.[[ReferencedName]], _W_).

  PrivateSet (O, P, value)
    ...
    5.a. Assert: _entry_.[[Kind]] is ~accessor~.
    ...
    5.c. Let _setter_ be _entry_.[[Set]].
    d. Perform ? Call(_setter_, _O_, « _value_ »).
name: to an accessor property with getter and setter
features: [class-fields-private, logical-assignment-operators]
---*/

class C {
  #setterCalledWith;
  get #field() {
    return /*{lhs}*/;
  }
  set #field(value) {
    this.#setterCalledWith = value;
  }
  compoundAssignment() {
    return this.#field /*{operator}*/ /*{rhs}*/;
  }
  setterCalledWithValue() {
    return this.#setterCalledWith;
  }
}

const o = new C();
assert.sameValue(o.compoundAssignment(), /*{result}*/, "The expression should evaluate to the result");
assert.sameValue(o.setterCalledWithValue(), /*{result}*/, "PutValue should call the setter with the result");
