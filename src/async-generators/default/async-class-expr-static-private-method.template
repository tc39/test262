// Copyright (C) 2018 Bloomberg L. All rights reserved.
// This code is governed by the BSD license found in the LICENSE file.

/*---
path: language/expressions/class/elements/async-gen-private-method-static/
name: Static async generator method as a ClassExpression element
esid: prod-AsyncGeneratorPrivateMethod
info: |
  ClassElement :
    static PrivateMethodDefinition

  MethodDefinition :
    AsyncGeneratorMethod

  Async Generator Function Definitions

  AsyncGeneratorMethod :
    async [no LineTerminator here] * PropertyName ( UniqueFormalParameters ) { AsyncGeneratorBody }
features: [async-iteration, class-static-methods-private]
---*/

var callCount = 0;

var C = class {
    static async *#gen() {
        callCount += 1;
        /*{ body }*/
    }
    static get gen() { return this.#gen; }
}

// Test the private fields do not appear as properties before set to value
assert.sameValue(Object.hasOwnProperty.call(C.prototype, "#gen"), false, 'Object.hasOwnProperty.call(C.prototype, "#gen")');
assert.sameValue(Object.hasOwnProperty.call(C, "#gen"), false, 'Object.hasOwnProperty.call(C, "#gen")');

var iter = C.gen();

/*{ assertions }*/

assert.sameValue(callCount, 1);

// Test the private fields do not appear as properties after set to value
assert.sameValue(Object.hasOwnProperty.call(C.prototype, "#gen"), false, 'Object.hasOwnProperty.call(C.prototype, "#gen")');
assert.sameValue(Object.hasOwnProperty.call(C, "#gen"), false, 'Object.hasOwnProperty.call(C, "#gen")');
