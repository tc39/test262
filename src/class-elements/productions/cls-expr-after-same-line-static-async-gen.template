// Copyright (C) 2017 the V8 project authors, 2017 Igalia S.L. All rights reserved.
// This code is governed by the BSD license found in the LICENSE file.

/*---
path: language/expressions/class/elements/after-same-line-static-async-gen-
name: field definitions after a static async generator in the same line
features: [class, class-fields-public, async-iteration]
flags: [async]
esid: prod-FieldDefinition
includes: [propertyHelper.js]
---*/

var C = class {
  static async *m() { return 42; } /*{ elements }*/;
  /*{ privateinspectionfunctions }*/
}

var c = new C();

assert(
  !Object.prototype.hasOwnProperty.call(c, "m"),
  "m doesn't appear as an own property on the C instance"
);
assert(
  !Object.prototype.hasOwnProperty.call(C.prototype, "m"),
  "m doesn't appear as an own property on the C prototype"
);

verifyProperty(C, "m", {
  enumerable: false,
  configurable: true,
  writable: true,
}, {restore: true});

C.m().next().then(function(v) {
  assert.sameValue(v.value, 42);
  assert.sameValue(v.done, true);

  function assertions() {
    // Cover $DONE handler for async cases.
    function $DONE(error) {
      if (error) {
        throw new Test262Error('Test262:AsyncTestFailure')
      }
    }
    /*{ assertions }*/
  }

  return Promise.resolve(assertions());
}).then($DONE, $DONE);
