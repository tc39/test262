// Copyright (C) 2017 Valerie Young. All rights reserved.
// This code is governed by the BSD license found in the LICENSE file.

/*---
desc: static private methods
info: |
  ClassElement :
    ...
    static FieldDefinition ;

  FieldDefinition :
    ClassElementName Initializer_opt

  ClassElementName :
    PrivateName

  PrivateName :
    # IdentifierName

template: productions
features: [class-static-methods-private]
---*/

//- privateinspectionfunctions
static #x(value) {
  return value / 2;
}
static #y(value) {
  return value * 2;
}
static x() {
  return this.#x(84);
}
static y() {
  return this.#y(43);
}
//- assertions

// Test the private methods do not appear as properties before set to value
assert(!Object.prototype.hasOwnProperty.call(C.prototype, "#x"), "test 1");
assert(!Object.prototype.hasOwnProperty.call(C, "#x"), "test 2");
assert(!Object.prototype.hasOwnProperty.call(c, "#x"), "test 3");

assert(!Object.prototype.hasOwnProperty.call(C.prototype, "#y"), "test 4");
assert(!Object.prototype.hasOwnProperty.call(C, "#y"), "test 5");
assert(!Object.prototype.hasOwnProperty.call(c, "#y"), "test 6");

// Test if private fields can be sucessfully accessed and set to value
assert.sameValue(C.x(), 42, "test 7");
assert.sameValue(C.y(), 86, "test 8");

// Test the private fields do not appear as properties before after set to value
assert(!Object.prototype.hasOwnProperty.call(C, "#x"), "test 9");
assert(!Object.prototype.hasOwnProperty.call(C, "#y"), "test 10");
