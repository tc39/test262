// Copyright (C) 2020 Rick Waldron. All rights reserved.
// This code is governed by the BSD license found in the LICENSE file.
/*---
path: language/expressions/class/async-gen-method-static/forbidden-ext/b2/cls-expr-async-gen-meth-static-
name: static class expression async generator method
esid: sec-class-definitions-runtime-semantics-evaluation
info: |
    ClassExpression : class BindingIdentifieropt ClassTail
features: [arrow-function, async-functions, async-iteration, class]
flags: [async]
---*/

var callCount = 0;
var C = class {
  static async *method() {
    /* implicit strict */
    // This and the following conditional value is set in the test's .case file.
    // For every test that has a "true" value here, there is a
    // corresponding test that has a "false" value here.
    // They are generated from two different case files, which use
    let descriptor = Object.getOwnPropertyDescriptor(inner, "caller");
    if (descriptor && descriptor.configurable && /*{ define-own-caller }*/) {
      Object.defineProperty(inner, "caller", /*{ define-own-caller-descriptor }*/);
    }
    var result = inner();
    if (descriptor && descriptor.configurable && /*{ define-own-caller }*/) {
      assert.sameValue(result, 1, 'If this test defined an own "caller" property on the inner function, then it should be accessible and should return the value it was set to.');
    }

    // "CALLER_OWN_PROPERTY_DOES_NOT_EXIST" is from
    // forbidden-ext-indirect-access-prop-caller.case
    //
    // If the function object "inner" has an own property
    // named "caller", then its value will be returned.
    //
    // If the function object "inner" DOES NOT have an
    // own property named "caller", then the symbol
    // CALLER_OWN_PROPERTY_DOES_NOT_EXIST will be returned.
    if (result !== CALLER_OWN_PROPERTY_DOES_NOT_EXIST) {
      assert.notSameValue(result, /*{ method-object }*/);
    }
    callCount++;
  }
};

C.method(/*{ args }*/).next()
  .then(() => {
    assert.sameValue(callCount, 1, 'function body evaluated');
  }, $DONE).then($DONE, $DONE);
