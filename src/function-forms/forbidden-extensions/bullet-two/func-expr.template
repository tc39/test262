// Copyright (C) 2020 Rick Waldron. All rights reserved.
// This code is governed by the BSD license found in the LICENSE file.
/*---
path: language/expressions/function/forbidden-ext/b2/func-expr-
name: function expression
esid: sec-definitions-runtime-semantics-evaluation
info: |
    FunctionExpression : function ( FormalParameters ) { FunctionBody }
---*/

var callCount = 0;
var f;
f = function() {
  "use strict";
  // This and the following conditional value is set in the test's .case file.
  // For every test that has a "true" value here, there is a
  // corresponding test that has a "false" value here.
  // They are generated from two different case files, which use
  // the same templates.
  let descriptor = Object.getOwnPropertyDescriptor(inner, "caller");
  if (descriptor && descriptor.configurable && /*{ define-own-caller }*/) {
    Object.defineProperty(inner, "caller", /*{ define-own-caller-descriptor }*/);
  }
  var result = inner();
  if (descriptor && descriptor.configurable && /*{ define-own-caller }*/) {
    assert.sameValue(result, 1, 'If this test defined an own "caller" property on the inner function, then it should be accessible and should return the value it was set to.');
  }

  // "CALLER_OWN_PROPERTY_DOES_NOT_EXIST" is from
  // forbidden-ext-indirect-access-prop-caller.case
  //
  // If the function object "inner" has an own property
  // named "caller", then its value will be returned.
  //
  // If the function object "inner" DOES NOT have an
  // own property named "caller", then the symbol
  // CALLER_OWN_PROPERTY_DOES_NOT_EXIST will be returned.
  if (result !== CALLER_OWN_PROPERTY_DOES_NOT_EXIST) {
    assert.notSameValue(result, /*{ function-object }*/);
  }

  callCount++;
};
f(/*{ args }*/);
assert.sameValue(callCount, 1, 'body evaluated');
