// Copyright (C) 2020 Rick Waldron. All rights reserved.
// This code is governed by the BSD license found in the LICENSE file.
/*---
path: language/expressions/async-generator/named-strict-error-
name: async generator named function expression in strict mode code
esid: sec-asyncgenerator-definitions-evaluation
info: |
    AsyncGeneratorExpression :
        async function * BindingIdentifier ( FormalParameters ) { AsyncGeneratorBody }

features: [async-iteration]
flags: [async, onlyStrict]
---*/

// increment callCount in case "body"
let callCount = 0;
let ref = async function * BindingIdentifier() {
  /*{ body }*/
};

(async () => {
  let catchCount = 0;
  try {
    (await (await ref()).next()).value
  } catch (error) {
    catchCount++;
    assert(error instanceof TypeError);
  }
  assert.sameValue(catchCount, 1);
  assert.sameValue(callCount, 1);
})().then($DONE, $DONE);

