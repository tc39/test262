// Copyright (C) 2017 the V8 project authors. All rights reserved.
// This code is governed by the BSD license found in the LICENSE file.
/*---
desc: >
    IteratorClose throws a TypeError when `return` returns a non-Object value
info: |
    ArrayAssignmentPattern : [ AssignmentElementList ]

    [...]
    4. If iteratorRecord.[[Done]] is false, return ? IteratorClose(iterator, result).
    5. Return result.

    7.4.6 IteratorClose( iterator, completion )

    [...]
    5. Let innerResult be Call(return, iterator, « »).
    6. If completion.[[Type]] is throw, return Completion(completion).
    7. If innerResult.[[Type]] is throw, return Completion(innerResult).
    8. If Type(innerResult.[[Value]]) is not Object, throw a TypeError exception.

features: [Symbol.iterator, generators]
template: async-generator
es6id: 12.14.5.2
esid: sec-runtime-semantics-destructuringassignmentevaluation
---*/

//- setup
let unreachable = 0;
let nextCount = 0;
let returnCount = 0;
let iterator = {
  next() {
    nextCount += 1;
    return {done: false, value: undefined};
  },
  return() {
    returnCount += 1;
    return null;
  }
};
let iterable = {
  [Symbol.iterator]() {
    return iterator;
  }
};
//- elems
[ {} = yield ]
//- vals
iterable
//- body
unreachable += 1;
//- teardown
iter.next().then(result => {
  assert.sameValue(nextCount, 1);
  assert.sameValue(returnCount, 0);
  assert.sameValue(result.value, undefined);
  assert.sameValue(result.done, false);

  iter.return().then(() => $DONE('Promise incorrectly fulfilled.'), ({ constructor }) => {
    assert.sameValue(nextCount, 1);
    assert.sameValue(returnCount, 1);
    assert.sameValue(unreachable, 0);
    assert.sameValue(constructor, TypeError);
  }).then($DONE, $DONE);
}, $DONE).catch($DONE);
