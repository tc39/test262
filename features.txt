# Proposed language features
#
# This project accepts tests for language proposals that have reached stage 3
# in TC39's standardization process. Those tests should be annotated with a
# dedicated feature flag so that consumers may more easily omit them as
# necessary.
#
# https://github.com/tc39/process-document

# BigInt
# https://github.com/tc39/proposal-bigint
BigInt

# Class Fields
# https://github.com/tc39/proposal-class-fields
class-fields-public
class-fields-private

# Promise.prototype.finally
# https://github.com/tc39/proposal-promise-finally
Promise.prototype.finally

# Async Iteration and Generators
# https://github.com/tc39/proposal-async-iteration
async-iteration
Symbol.asyncIterator

# Object rest/spread properties
# https://github.com/tc39/proposal-object-rest-spread
object-rest
object-spread

# Optional Catch Binding
# https://github.com/tc39/proposal-optional-catch-binding
optional-catch-binding

# RegExp s (dotAll) flag
# https://github.com/tc39/proposal-regexp-dotall-flag
regexp-dotall

# RegExp lookBehind
# https://github.com/tc39/proposal-regexp-lookbehind
regexp-lookbehind

# RegExp named groups capturing
# https://github.com/tc39/proposal-regexp-named-groups
regexp-named-groups

# RegExp Unicode Property Escapes
# https://github.com/tc39/proposal-regexp-unicode-property-escapes
regexp-unicode-property-escapes

# Shared Memory and atomics
# https://github.com/tc39/ecmascript_sharedmem
Atomics
SharedArrayBuffer

# Array.prototype.flatten and Array.prototype.flatMap
# https://github.com/tc39/proposal-flatMap
Array.prototype.flatten
Array.prototype.flatMap

# String Trimming
# https://github.com/tc39/proposal-string-left-right-trim
# Includes all tests for:
# String.prototype.{trimStart, trimEnd, trimLeft, trimRight }
string-trimming
String.prototype.trimEnd
String.prototype.trimStart

# Numeric Separator Literal
# https://github.com/tc39/proposal-numeric-separator
numeric-separator-literal

# Standard language features
#
# Language features that have been included in a published version of the
# ECMA-262 specification. These flags are largely maintained for historical
# reasons, though their use for relatively new features (i.e. prior to
# availability across major implementations) is appreciated.

ArrayBuffer
Array.prototype.values
arrow-function
async-functions
caller
class
computed-property-names
const
cross-realm
DataView
DataView.prototype.getFloat32
DataView.prototype.getFloat64
DataView.prototype.getInt16
DataView.prototype.getInt32
DataView.prototype.getInt8
DataView.prototype.getUint16
DataView.prototype.getUint32
DataView.prototype.setUint8
default-arg
default-parameters
destructuring-assignment
destructuring-binding
for-of
Float64Array
generators
Int8Array
let
Map
new.target
Object.is
Proxy
Reflect
Reflect.construct
Reflect.set
Reflect.setPrototypeOf
Set
String.prototype.endsWith
String.prototype.includes
super
Symbol
Symbol.hasInstance
Symbol.isConcatSpreadable
Symbol.iterator
Symbol.match
Symbol.replace
Symbol.search
Symbol.species
Symbol.split
Symbol.toPrimitive
Symbol.toStringTag
Symbol.unscopables
tail-call-optimization
template
TypedArray
u180e
Uint8Array
Uint16Array
WeakMap
WeakSet

# Test-harness features requiring host environment/test runner support
#
# The rare cases where testing language functionality requires non-standard
# language features, exposed through global-environment functions on the $262
# object, go here.

IsHTMLDDA
